[
    {
        "scope": "https://dx.tips:443",
        "method": "GET",
        "path": "/rss.xml",
        "body": "",
        "status": 200,
        "response": "<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:content=\"http://purl.org/rss/1.0/modules/content/\" xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\"><channel><title><![CDATA[DX Tips: The DevTools Magazine]]></title><description><![CDATA[DX Tips: The DevTools Magazine]]></description><link>https://dx.tips</link><generator>RSS for Node</generator><lastBuildDate>Sun, 19 Jun 2022 13:18:39 GMT</lastBuildDate><atom:link href=\"https://dx.tips/rss.xml\" rel=\"self\" type=\"application/rss+xml\"/><language><![CDATA[en]]></language><ttl>60</ttl><item><title><![CDATA[Resource: The Best DevTools Pitches of All Time]]></title><description><![CDATA[<p><em>This is a live-updating resource - meaning it will be stickied to our permanent <a target=\"_blank\" href=\"https://dx.tips/resources\">Resources</a> page. Please feel free to bookmark, and send in suggestions for updates!</em></p>\n<p>Much of this was sourced from too many folks to thank on </p>\n<p><a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31782200\">HN</a>:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1655508714398/9OSHLICiD.png\" alt=\"image.png\" /></p>\n<p>and <a target=\"_blank\" href=\"https://twitter.com/swyx/status/1537858004435238912\">Twitter</a>:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1655508740226/gFc-cI82G.png\" alt=\"image.png\" /></p>\n<h2 id=\"heading-the-best-of-the-best\">The Best of the Best</h2>\n<ul>\n<li><strong>Ruby on Rails</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=Gzj723LkRJY\">15 minute demo</a> by DHH - inspired <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=MZvmYaFkNJI\">Elixir Liveview demo</a></li>\n<li><strong>Docker</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=wW9CAH9nSLs\">5 minute demo</a> by Solomon Hykes</li>\n<li><strong>Twilio</strong>: <a target=\"_blank\" href=\"https://avc.com/2016/06/best-seed-pitch-ever/\">Jeff Lawson short story</a>, <a target=\"_blank\" href=\"https://avc.com/2010/08/how-to-pitch-a-product/\">John Britton 6 min live demo</a> - <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=wGJMt1jFgqg\">modern version</a></li>\n<li><strong>Visual Basic 1.0</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=Fh_UDQnboRw\">3 minute demo</a> by Bill Gates</li>\n</ul>\n<h2 id=\"heading-platforms\">Platforms</h2>\n<ul>\n<li><strong>AWS</strong>: Jeff Bezos pitching <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=uIc-VB-ke9o&amp;t=8s\">EC2 in 5 minutes</a>, and <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=6nKfFHuouzA\">AWS in 40mins</a>, and Jeff Barr's <a target=\"_blank\" href=\"https://aws.amazon.com/blogs/aws/we_build_muck_s/\">We Build Muck So You Don't Have To blogpost</a> (modern version is \"undifferentiated heavy lifting\")<ul>\n<li>Honorable mention: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=OdQt0hF8jOo&amp;t=355s\">12 min Q&amp;A</a> (<em>can we find a better link?</em>). On S3: \"It is hard to come up with a web application that doesn't need to remember things\".</li>\n</ul>\n</li>\n<li><strong>Google Cloud Spanner</strong>: <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31783153\">HN Recollection</a></li>\n<li><strong>Google BigQuery</strong>: <a target=\"_blank\" href=\"https://hoffa.medium.com/static-javascript-code-analysis-within-bigquery-ed0e3011732c\">Felipe Hoffa examples</a> (can we find better links?)</li>\n<li><strong>Stripe</strong>: \"7 lines of code\" (<em>demo link needed</em>)</li>\n<li><strong>Netlify</strong>: <a target=\"_blank\" href=\"https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/\">blogpost</a> and <a target=\"_blank\" href=\"https://vimeo.com/163522126\">40min conf talk</a></li>\n<li><strong>Heroku</strong>: https://12factor.net/ and <code>git push heroku master</code></li>\n<li><strong>Cloudflare</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=XeKWeBw1R5A\">TechCrunch Disrupt 2010 16min pitch</a></li>\n<li><strong>Firebase</strong>: <a target=\"_blank\" href=\"https://twitter.com/_davideast/status/1537864335715860482\">Googler Recollection</a>, <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=3832877\">HN Launch</a></li>\n</ul>\n<h2 id=\"heading-oss\">OSS</h2>\n<ul>\n<li><strong>React</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY&amp;feature=youtu.be\">Rethinking Best Practices</a> by Pete Hunt.<ul>\n<li>Compare with original <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=GW0rj4sNH2w\">Jordan Walke talk</a> - <a target=\"_blank\" href=\"https://www.listennotes.com/podcasts/the-swyx-mixtape/how-react-got-traction-pete-N0rAdW9lbqo/\">Pete Hunt's retrospective</a></li>\n<li>honorable mention - David Nolen's <a target=\"_blank\" href=\"http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/\">Introducing Om</a></li>\n<li>and <a target=\"_blank\" href=\"http://hackflow.com/blog/2015/03/08/boiling-react-down-to-few-lines-in-jquery/\">Hackflow</a>)</li>\n</ul>\n</li>\n<li><strong>Next.js</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=evaMpdSiZKk\">Guillermo Rauch - 34min talk at React Conf</a></li>\n<li><strong>Svelte</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=AdNJ3fydeao\">35min conf talk</a></li>\n<li><strong>Node</strong> (<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ztspvPYybIY&amp;feature=youtu.be\">48min JSConf 2010</a>) and <strong>Deno</strong> (<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=M3BM9TB-8yA\">26min JSConf 2018</a>)</li>\n<li><strong>Redux</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">30 min React Europe 2015</a></li>\n<li><strong>Meteor</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=fsi0aJ9yr2o\">10 minute demo</a></li>\n<li><strong>Kubernetes</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=HlAXp0-M6SY\">the Kelsey Hightower \"Tetris\" demo - 44mins</a></li>\n<li><strong>Kafka</strong>: <a target=\"_blank\" href=\"https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying\">the Log blogpost</a> by Jay Kreps</li>\n<li><strong>TypeScript</strong>: <a target=\"_blank\" href=\"https://www.typescriptlang.org/\">just the website</a> in 2022 is convincing to some</li>\n<li><strong>Rust</strong>: \"Fearless concurrency\", or <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31784253\">the Sawstop safe table saw</a> as Steve Klabnik put it</li>\n<li><strong>MongoDB</strong>: <a target=\"_blank\" href=\"https://twitter.com/mongodb/status/1192530877148008448\">Good podcast pitch</a></li>\n</ul>\n<p><a target=\"_blank\" href=\"https://www.webdesignmuseum.org/web-design-history/jquery-2006\">jQuery landing page</a> honorary mention.</p>\n<h2 id=\"heading-aiml\">AI/ML</h2>\n<ul>\n<li><strong>OpenAI Codex</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=SGUCcjHTmGY\">30 min live demo</a> creating a fully functioning game in JavaScript using just plain old english.</li>\n<li><strong>GitHub Copilot</strong>: <em>definitive demo needed</em></li>\n<li><strong>Explosion AI</strong>: <a target=\"_blank\" href=\"https://explosion.ai/blog/supervised-learning-data-collection\">blogpost</a> - <a target=\"_blank\" href=\"https://twitter.com/fishnets88/status/1537871452845768705?s=20&amp;t=4iNqIsqnpE1SC80yna5Pbg\">convincing</a></li>\n</ul>\n<h2 id=\"heading-editors-picks\">Editor's picks</h2>\n<p>Smaller projects that aren't as well known but do something well:</p>\n<ul>\n<li><strong>Stackblitz</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=P1-HAN1g4_4\">6min demo</a>, <a target=\"_blank\" href=\"https://twitter.com/sulco/status/1537867531511287808?s=20&amp;t=C-LwWGNsmIrQVqOu9U7OfA\">tweet</a></li>\n<li><strong>Anaconda PyScript</strong>: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=qKfkCY7cmBQ&amp;t=425s\">demo by Peter Wang</a></li>\n<li><strong>Remix.run</strong>: <a target=\"_blank\" href=\"https://remix.run/\">website</a> uses some nice scrollytelling</li>\n</ul>\n<h2 id=\"heading-developer-adjacent-and-misc-demo-inspiration\">Developer Adjacent and Misc Demo Inspiration</h2>\n<ul>\n<li>Developer Adjacent:<ul>\n<li><strong>Doug Engelbart</strong>'s Mother of All Demos: <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/The_Mother_of_All_Demos\">wiki</a>, <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=yJDv-zdhzMY\">1h 40min video</a></li>\n<li><strong>Bret Victor</strong>'s Inventing on Principle: <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=PUv66718DII\">54min talk</a></li>\n<li><strong>Steve Jobs</strong> NeXT demo of interface builder and enterprise object framework (<a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31783713\">HN comment</a>, <a target=\"_blank\" href=\"https://youtu.be/rf5o5liZxnA?t=1387\">Video</a>) and of course <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=MnrJzXM7a6o\">the 10 minute iPhone pitch</a></li>\n<li><strong>Drew Houston</strong>' s <a target=\"_blank\" href=\"https://techcrunch.com/2011/10/19/dropbox-minimal-viable-product/\">Dropbox demo</a></li>\n<li><strong>Todd McKinnon</strong>'s <a target=\"_blank\" href=\"https://www.bvp.com/atlas/okta-ceo-todd-mckinnon-on-powering-through-your-darkest-days-until-finally-the-category-is-born\">Why I'm Not Crazy</a> presentation for Okta</li>\n<li><a target=\"_blank\" href=\"https://www.ted.com/talks/blaise_aguera_y_arcas_how_photosynth_can_connect_the_world_s_images\">Photosynth TED talk demo</a></li>\n</ul>\n</li>\n<li>Idea Pitches:<ul>\n<li><strong>CQRS and Event Sourcing</strong> - <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=JHGkaShoyNs\">1h talk</a>, <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31783857\">HN citation</a></li>\n<li><strong>Unix Chainsaw</strong> by <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=ZQnyApKysg4\">Gary Bernhardt</a></li>\n</ul>\n</li>\n<li><strong>Light Table</strong>: <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31782449\">HN</a></li>\n<li>Let's Encrypt https://twitter.com/mbleigh/status/1537866383710511104</li>\n<li>Figwheel-Clojurescript https://www.youtube.com/watch?v=j-kj2qwJa_E&amp;t=598s</li>\n</ul>\n]]></description><link>https://dx.tips/pitches</link><guid isPermaLink=\"true\">https://dx.tips/pitches</guid><dc:creator><![CDATA[swyx]]></dc:creator><pubDate>Fri, 17 Jun 2022 22:17:32 GMT</pubDate></item><item><title><![CDATA[Don't Let a Bad Abstraction Cost You 2 Years...]]></title><description><![CDATA[<p><strong>We spent 2 years building a product</strong> that got oohs and ahhs <strong>but got no real usage.</strong> </p>\n<p>We took all the YCombinator advice for finding Product-Market Fit: we narrowed the focus of who the product was tailored to, we generalized a few features, talked to hundreds of developers, but nothing absolutely nothing would stick. The product was really useful, but we misused abstraction and the product never fit a users value toolchain <sup>[1]</sup>.</p>\n<p>This is the story of how we (<a target=\"_blank\" href=\"https://brev.dev/\">Brev.dev</a>) learned the lesson of abstractions the hard way, and pivoted our way out of it!</p>\n<h2 id=\"heading-the-origin-of-brev\">The Origin of Brev</h2>\n<p>Our first startup, Paneau, put tablets in Ubers/Lyfts for local businesses to advertise on. \nWith heavy physical operations, we didnt survive the pandemic (<a target=\"_blank\" href=\"https://www.brev.dev/post/uber-dev-environment\">heres how if interested</a>).\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1655394706162/9Hz0w1iSg.png\" alt=\"image.png\" /></p>\n<p>After Paneau died, within an hour, we had started building Brev we desperately wanted to make it easier for ourselves of 2 years prior to build what we had built. We always overcame physical hurdles, like the time we haggled AT&amp;T to give us 200 free tablets or snuck past Uber security to get in more cars, or when I emptied my 401K to survive one more month while we waited to hear back from YC. But solving <em>digital</em> problems are a different beast.</p>\n<p>During January 2020, our first month of YC, we had a terrifying dev environment issue that took a month for us to solve. When dev environment issues strike, you have no idea how long theyre going to take, and youre not doing creative work it feels like blindly throwing things at a wall until something sticks. This was the only time a hurdle actually felt like it was limiting us, and those moments were excruciatingly painful just the pit feeling in your stomach youre stuck! So we set out to abstract away dev environments altogether. </p>\n<h2 id=\"heading-brev-v0-the-dream-stack-as-a-service\">Brev v0: The Dream Stack as a Service</h2>\n<p>Abstractions are like rungs of a ladder, and we wanted to place the user one rung above the environment. The only way to do that is to <strong>make all the architectural decisions for you</strong>. To solve the problem of dev environments that keep causing hell, we built an IDE that prescribed to you the same stack we used to build Paneau: a NoSQL database, Python, specifically Python 3.7.5, with FastAPI as the web framework.</p>\n<p>Because of these decisions, you never had to install <em>anything</em> (other than python packages you wanted) you just went to <code>app.brev.dev</code> and started coding.  You also got SMS/Twilio, web argument error handling, cron jobs, and way more out of the box. You could click a big red button<sup>[2]</sup> and instantly deploy your code. You could, or rather, we could, build our advertising startup within an afternoon. </p>\n<p>Users built some pretty cool things! You could build an SMS chat bot within minutes. I hosted a couple virtual coding classes on Reddit where newbies who had never built anything built a fully deployed todo app after an hour.</p>\n<h2 id=\"heading-the-problem-where-abstractions-kill-products\">The Problem: Where Abstractions Kill Products</h2>\n<p>Even if we found literal split images of us that wanted the Python-FastAPI-NoSQL prescribed stack, <strong>there eventually comes a time where you need to do something the makers of an abstraction didnt intend.</strong> And this is where the abstraction fails. Lets say you got off the ground with our prescription but then noticed your data model was slowing down your DB queries so you want to move to Mongo. Well, ya cant. And this is where abstractions kill products.</p>\n<p>Abstractions are really powerful when they match the problem youre solving. But, if you do your job well, the problem youre solving changes for example, first building an MVP to get users to but later needing to optimize database queries because of a lot of users. And with the problem changing, the abstraction must change as well. <strong>Products shouldnt marry an abstraction</strong>, but rather enable a user to climb up and down the ladder, being able to use only the rung that is essential to solving their current problem, abstracting away unnecessary variables.</p>\n<p>We realized the prescription wasnt the problem, it was the marriage to it. How can we provide the same abstraction but let users navigate the rungs at their will? In April 2021, we <code>rm -rf</code>-ed our repo<sup>[3]</sup> so that we couldnt have a sunk cost fallacy leading us into a trap of leveraging what we had already built. We thought to ourselves, knowing what we know now, how would we approach this problem?</p>\n<h2 id=\"heading-the-new-brev-containers-for-development\">The New Brev: Containers for Development</h2>\n<p>We learned that <strong>the only way to win <a target=\"_blank\" href=\"https://dx.tips/the-end-of-localhost\">the End of Localhost</a> is to respect a developers preferences all of them</strong>. Two developers who think their favorite IDE or framework is superior are <em>both</em> correct. </p>\n<p>We realized a Brev user in flow shouldnt be doing anything different. Brev shouldnt be a product, it should be your terminal and your environment but without your environment issues. So we pivoted Brev to be a powerful cloud computer for local development.</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://www.loom.com/share/6f9fd94c76ca4af3859aa38a4780d39d\">https://www.loom.com/share/6f9fd94c76ca4af3859aa38a4780d39d</a></div>\n<p>We now provide a dev environment (as a VM) with everything running out of the box. You can use a template of ours and itll just work. But, youre the superuser of your dev environment, not us. Its your terminal, and your same tools &amp; IDE, not ours. We even go out of our way to help you <a target=\"_blank\" href=\"https://docs.brev.dev/howto/configure-ssh-proxy-daemon-at-boot/\">configure an ssh proxy for your shell</a> to boot straight into a Brev environment. We have no say, nor do we want say, in what you do on the machine or how you use it. But because we picked a better level of abstraction, you get <a target=\"_blank\" href=\"https://docs.brev.dev/reference/dot-brev-setup-script/#branching-your-environment\">environment branching</a> and <a target=\"_blank\" href=\"https://docs.brev.dev/reference/dot-brev-setup-script/#brevportsyaml\">public port sharing</a> and even <a target=\"_blank\" href=\"https://docs.brev.dev/howto/troubleshoot-reset/\">delete your machine for a fresh one</a> if you get yourself in a bad state. and <a target=\"_blank\" href=\"https://www.brev.dev/post/glimpse-acquisition\">can securely share your code for due diligence in the acquisition process</a></p>\n<p>Its funny, you could do everything right, have solid marketing and sales motions, solid product, but if your abstraction doesnt fit a users value toolchain, it doesnt matter. Hopefully you wont make the painful mistakes we made. </p>\n<p>If youre building something new and wanna talk through it, please reach out! <a target=\"_blank\" href=\"https://twitter.com/NaderLikeLadder\">@naderlikeladder</a></p>\n<hr />\n<details>\n<summary>\n 1 . <span id=\"ft1\"></span> Value toolchain is a concept I first read about on <a target=\"_blank\" href=\"https://evanjconrad.com/posts/product-abstraction#the-abstraction-chain\">Evan Conrads blog</a>. \n</summary>\nEssentially, think of users as being at point A and wanting to be at point B. A product or service, if it fits a users value toolchain, must fit in at A and arrive at B. If the product or service doesnt fit entirely, they will need another product or service to fill the gap.\n</details>\n\n\n<details>\n<summary>\n\n 2 . <span id=\"ft2\"></span> It <a href=\"https://twitter.com/BrevDev/status/1360293086958477316?s=20&amp;t=M07ST7P2ITg_0Rcw4r7wzQ \">was indeed a big red button</a>!\n\n</summary>\n\n\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1655395290120/zuBgSocb_.png\" alt=\"Screen Shot 2022-06-16 at 9.01.26 AM.png\" />\n\n\n</details>\n\n\n<details>\n    <summary>\n 3 . <span id=\"ft3\"></span> Warning: Don't try this at home!\n    </summary>\n\n\n <img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1655395302909/fCwGgJE4h.png\" alt=\"Screen Shot 2022-06-16 at 9.01.39 AM.png\" />\n\n\n</details>\n\n]]></description><link>https://dx.tips/dont-let-a-bad-abstraction-cost-you-2-years</link><guid isPermaLink=\"true\">https://dx.tips/dont-let-a-bad-abstraction-cost-you-2-years</guid><dc:creator><![CDATA[Nader Khalil]]></dc:creator><pubDate>Fri, 17 Jun 2022 15:34:30 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1655480058027/LBqJUOduQ.jpeg</cover_image></item><item><title><![CDATA[What's Your Dark Matter Strategy?]]></title><description><![CDATA[<p>When looking for something, we have an extremely strong bias to <em>only search where it is easy to search</em>.</p>\n<p>This is known as the <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Streetlight_effect\">streetlight effect</a>, named after a 1920's joke:</p>\n<blockquote>\n<p>A policeman sees a drunk man searching for something under a streetlight and asks what the drunk has lost. He says he lost his keys and they both look under the streetlight together. After a few minutes the policeman asks if he is sure he lost them here, and the drunk replies, no, and that he lost them in the park. The policeman asks why he is searching here, and the drunk replies, \"this is where the light is\".</p>\n</blockquote>\n<p>It's easy to make fun of streetlight searchers when it is someone else exhibiting this behavior. Recruiters trying to fill software engineering vacancies will camp out all day on LinkedIn, not because LinkedIn is the favorite platform of software engineers. No - recruiters spend all day on LinkedIn because LinkedIn is the only platform that takes recruiters seriously. Cue the criticism: \n\"That's so lazy!\" \"You're missing out on all the developers who have sworn off LinkedIn!\" \"The <em>in-demand</em> developers don't even check LinkedIn, by definition!\"</p>\n<p>Then it's useful to go out-of-body and turn the streetlight on ourselves.</p>\n<p>Developer content creators hang out all day on Twitter and Reddit, and travel around the world on the meetup and conference circuit. This is, unsurprisingly, a formulation of the world that just so happens to put content creators at the center of the universe.</p>\n<p>And yet, of <a target=\"_blank\" href=\"https://octoverse.github.com/\">the 73 million developers in the world</a>:</p>\n<ul>\n<li>Maybe ~200k (0.2%) hang out on Twitch (across <a target=\"_blank\" href=\"https://www.twitch.tv/georgehotz\">geohotz</a>, <a target=\"_blank\" href=\"https://x-team.com/blog/code-streaming-channels/\">CodingTrain, jlengstorf</a>, <a target=\"_blank\" href=\"https://x-team.com/blog/code-streaming-channels/\">noopkat</a>, <a target=\"_blank\" href=\"https://www.twitch.tv/lana_lux\">Lana Lux</a>,  and so on)</li>\n<li>Maybe ~200k (0.3%) go to conferences (my guess: ~250 conferences * ~800 people per conf)</li>\n<li>Only ~1 million (1.3%) hang out on Twitter (my guesstimate)</li>\n<li>Maybe ~1.5 million (2%) hang out on TikTok (across <a target=\"_blank\" href=\"https://www.tiktok.com/@misodope?refer=embed\">@misodope</a>, <a target=\"_blank\" href=\"https://www.tiktok.com/@theannalytical?lang=en\">Anna Lytical</a>, <a target=\"_blank\" href=\"https://www.tiktok.com/@thebenjohns?refer=embed\">Benji Johns</a>, <a target=\"_blank\" href=\"https://www.tiktok.com/@xtinacomputes?refer=embed\">@xtinacomputes</a> and <a target=\"_blank\" href=\"https://www.nodeflair.com/blog/10-hilarious-tiktoks-about-life-as-a-software-engineer\">more</a></li>\n<li>Only ~2.5 million (3.4%) hang out on LinkedIn (just scaling up Twitter estimate by LinkedIn MAU) (and maybe similar on Facebook and Instagram - <a target=\"_blank\" href=\"https://blog.feedspot.com/programming_instagram_influencers/\">source</a>, <a target=\"_blank\" href=\"https://www.thetrainingroom.com/blog/it-and-development/october-2021/top-10-instagram-accounts-to-improve-your-coding-a\">source</a>)</li>\n<li>Perhaps ~5 million (7%) hang out on Reddit (rounding up <a target=\"_blank\" href=\"https://www.reddit.com/r/programming/\">/r/programming</a>)</li>\n<li>Maybe ~7 million (9.5%) hang out on Hacker News (<a target=\"_blank\" href=\"https://twitter.com/swyx/status/1422043347011600386\">if each request is unique</a> - more realistically the #1 slot is only worth <a target=\"_blank\" href=\"https://twitter.com/forrestbrazeal/status/1537917841906601986?s=20&amp;t=YOZo2jtp259btelwCgwwrQ\">100k views</a>)</li>\n<li>Say ~10 million (13.7%) watch Dev YouTube (rounding up a lot from <a target=\"_blank\" href=\"https://www.youtube.com/c/freecodecamp\">freecodecamp</a>, <a target=\"_blank\" href=\"https://www.youtube.com/user/thenewboston\">thenewboston</a>, <a target=\"_blank\" href=\"https://www.youtube.com/c/TraversyMedia\">Traversy Media</a> and so on)</li>\n</ul>\n<p>With the most optimistic take, summing across ALL of these audiences (no overlap), you only capture ~33% of the market. Meaning if you, as a developer content creator, <em>reached every conventional audience there is on every platform there is</em>, <strong>you still would not be reaching two thirds of developers</strong>. And those you <em>could</em> reach would be majority newer developers who have the time and desire to spend on your content.</p>\n<p>The other 2/3 of developers aren't spending their free time at meetups or watching livestreams. They'll maybe go to one conference every three years. They don't care about the hot takes. They have to look up the acronyms you take for granted. They don't know what new framework is obviously the future, and which code pattern was <em>so yesterday</em>.</p>\n<p>I'm not the first to make this observation (though to my knowledge I am the first to put real estimates on them). </p>\n<ul>\n<li><strong>Scott Hanselman</strong> first named these the <a target=\"_blank\" href=\"https://www.hanselman.com/blog/dark-matter-developers-the-unseen-99\">Dark Matter Developers</a> - you can't see them, but you can see their footprint, in packages downloaded and software shipped. He described them: <blockquote>\n<p>Where are the dark matter developers? Probably getting work done. Maybe using .NET 1.1 at a local municipality or small office. Maybe working at a bottling plant in Mexico in VB6. Perhaps they are writing PHP calendar applications at a large chip manufacturer. They use mature products that are well-known, well-tested and well-understood. They aren't chasing the latest beta or pushing any limits, they are just producing.</p>\n</blockquote>\n</li>\n<li><strong>Ilya Grigorik</strong> called these \"<a target=\"_blank\" href=\"https://www.youtube.com/watch?v=vtIfVPtN6io\">the torso and the tail</a>\" of <a target=\"_blank\" href=\"https://twitter.com/swyx/status/1360882870638665731\">the Rogers curve</a> - thought leaders spend most of their time speaking to other thought leaders, but the people that thought leaders most need to reach <em>aren't even in the same room</em>.</li>\n</ul>\n<p>And yet. People are never really cut off from the world. Even people in small towns know when there is a new President. You just have to reach them where <em>they</em> are, not where you prefer to be.</p>\n<p>Dark Matter developers are more likely to be shipping production (if not flashy) software, more likely to have decisionmaking and buying power (as a generational tendency), and far more likely to be sticky to whatever technology they pick (by definition). If you are in developer relations, it is <em>very much</em> in your interest to reach the Dark Matter Developers.</p>\n<p>So: do you have a plan to reach them?</p>\n<blockquote>\n<p><strong>Aside</strong>: sorry if you read to the end looking for solutions - I have some ideas (<a target=\"_blank\" href=\"https://dx.tips/whats-your-dark-matter-strategy#write-comment\">see the comments section</a>), but no solutions to offer you yet. But I do think it is a thought provoking question to ask for rounding out content strategy. Please get in touch if you have thoughts and I'll include in a future writeup!</p>\n</blockquote>\n]]></description><link>https://dx.tips/whats-your-dark-matter-strategy</link><guid isPermaLink=\"true\">https://dx.tips/whats-your-dark-matter-strategy</guid><dc:creator><![CDATA[swyx]]></dc:creator><pubDate>Mon, 13 Jun 2022 12:04:53 GMT</pubDate></item><item><title><![CDATA[The End of Localhost]]></title><description><![CDATA[<p><strong>Dev environments should be cattle, not pets</strong>. It looks likely that in future, most development will <em>not</em> be done on <code>localhost</code>, the most precious pet of all.</p>\n<blockquote>\n<p>See reactions on <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31669762\">Hacker News</a> and <a target=\"_blank\" href=\"https://twitter.com/swyx/status/1533910738942562304\">Twitter</a>.</p>\n</blockquote>\n<hr />\n<p><strong>Make the ultimate developer experience wishlist</strong> for the average rich-country developer in 2030:</p>\n<ul>\n<li>Fast gigabit internet is <em>cheap</em> and <em>everywhere</em> (5G or mesh wifi)</li>\n<li>Dev machines (laptops, tablets, VR) are <em>cheap</em> and have multiday battery life</li>\n<li>Your apps build in a second <em>regardless of scale</em>, with tests and staging environments/deploy previews ~instantly live after every keystroke</li>\n<li>Your personal dev environment travels with you no matter which device you use</li>\n<li>Any app's environmental dependencies - everything from a HTTPS cert to a sanitized, sandboxed fork of the production database - are immediately available to any teammate ramping up to contribute any feature. No docs, no runbook.</li>\n<li>You can go from idea to first customer in a weekend, using a combination of low-code builders and backends-as-a-service</li>\n<li>You can scale up from MVP to unicorn in weeks, using one of the serverless or \"new Heroku\" platforms, and auth/payments/database/communication needs handled by world-class SaaS teams</li>\n</ul>\n<p>You will notice that most of these items enable (even <em>require</em>) you to run things \"live\" on the cloud, not <code>localhost</code>.</p>\n<p>Perhaps most importantly, the time wasted fixing bugs between dev and prod environments <strong>goes from 1-4 hours a week down to 0</strong>, if you can simply eliminate the discrepancy between dev and prod.</p>\n<blockquote>\n<p>Aside: Realistically, you will always have <em>some</em> discrepancy between \"staging\" and production environments, but the distance between them should be much smaller than between dev and prod. For example, working on  <code>https</code> is always a pain in <code>localhost</code> but is a requirement on prod.</p>\n</blockquote>\n<p>To <a target=\"_blank\" href=\"https://www.wired.com/2012/04/ff-andreessen/\">paraphrase Bob Metcalfe</a>, if the browser reduced operating systems to \"a poorly debugged set of device drivers\", then <strong>the cloud is reducing the dev machine to a poorly maintained set of environment mocks</strong>.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1654705265316/mTPjVacfU.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<p>That's it, that's the blogpost. The rest of this article is working out subpoints, examples, trends, and anecdata.</p>\n<h2 id=\"heading-but-i-need-to-code-on-a-plane\">But I Need To Code on a Plane?</h2>\n<p>Maybe stop flying so much. Or get a good audiobook and rest your eyes. Maybe even talk to your neighbor! (if they seem social)</p>\n<h2 id=\"heading-the-future-is-just-not-evenly-distributed-argument\">The \"Future is Just Not Evenly Distributed\" Argument</h2>\n<p>Many Bigcos who have invested in their developer productivity already work entirely in the cloud. This will be news to some of you, and old hat to others, so I didn't know how much emphasis to place on this.</p>\n<p>But to my knowledge, this is the first time anyone has collected public info about Bigco dev environments in one place:</p>\n<ul>\n<li><strong>Google Cider</strong> is Google's web IDE that \"mounts the enormous Piper file system and provides a super tight integration with internal review, build and testing tools\" without downloading any source code to the local machine (<a target=\"_blank\" href=\"https://www.quora.com/What-does-Googles-web-IDE-look-like\">source</a>, <a target=\"_blank\" href=\"https://medium.com/codesphere-cloud/why-online-coding-is-the-future-e7b9a255f77f\">source</a>) </li>\n<li><strong>FB On-Demand</strong> is Facebook's way to do \"on-demand\" environment provisioning that create a live feature preview with more fidelity than local. At FB, \"<a target=\"_blank\" href=\"https://twitter.com/gwenshap/status/1533956840240779264?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">local development did not exist</a>\". (<a target=\"_blank\" href=\"https://twitter.com/threepointone/status/1533971160005738496\">FB alum tweet</a>, <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=29164556\">YC startup clone</a>)</li>\n<li><strong>Etsy</strong> has all development happening in cloud VMs. \"I dont have the repo even checked out outside of that.\" (<a target=\"_blank\" href=\"https://twitter.com/ShinyEliza_/status/1535299721677316096?s=20&amp;t=Y4n45SWd6Bd06Ah0-Jx1Cg\">tweet</a>)</li>\n<li><strong>Tesla</strong> moved from local to cloud for their vehicle OS development (<a target=\"_blank\" href=\"https://twitter.com/charmcgi/status/1534182983837618176\">source</a>)</li>\n<li><strong>Palantir</strong> moved to remote ephemeral workspaces (<a target=\"_blank\" href=\"https://blog.palantir.com/the-benefits-of-remote-ephemeral-workspaces-1a1251ed6e53\">source</a>, thanks <a target=\"_blank\" href=\"https://twitter.com/bpmct/status/1533932035147980802?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">Ben Potter</a>)</li>\n<li><strong>Shopify</strong> is \"moving the majority of our developers into our cloud development environment, called Spin.\"  (<a target=\"_blank\" href=\"https://shopify.engineering/shopifys-cloud-development-journey\">blogpost on Spin</a>, <a target=\"_blank\" href=\"https://shopify.engineering/cloud-load-modular-code-shopify-2022\">source</a>, thanks <a target=\"_blank\" href=\"https://twitter.com/davidstosik/status/1533981379209613312?s=20&amp;t=shjhKXR3Gtrtr54iSqHPnA\">David Stosik</a>)<ul>\n<li><em>\"[Tobi Lutke said] that the teams role was to create abstractions that permitted developers to defer their understanding of development environment construction until they were curious about it. For example, no developer is required to deeply understand the ruby interpreter in order to write Rails applications. The same should be true about development environments.\"</em></li>\n</ul>\n</li>\n<li><strong>Github</strong> \"left our macOS model behind and moved to Codespaces for the majority of GitHub.com development\". (<a target=\"_blank\" href=\"https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces\">source</a>, <a target=\"_blank\" href=\"https://twitter.com/swyx/status/1436602844216500227\">podcast</a>)</li>\n</ul>\n<p>The standard response to bringing up a bunch of Bigcos is \"sure, but does it work for my small team?\"</p>\n<p>The answer is invariably \"maybe yes, but also probably not in this current form\", because most of these moves were done after sizable internal investment and take advantage of lots of proprietary infrastructure. However, as this tech commoditizes, we'll see more and more of it spread out as we find commonalities among audience subsets.</p>\n<p>The obvious first part of commoditizing preview environments has already been done - one of Netlify's early innovations was making <a target=\"_blank\" href=\"https://www.netlify.com/products/deploy-previews/\">deploy previews for frontend projects</a> ubiquitous. Virtually every docs site now uses some form of deploy preview system, and Jamstack apps can also use them for their release process (<a target=\"_blank\" href=\"https://twitter.com/philhawksworth/status/1149664004681240577\">example</a>). With <a target=\"_blank\" href=\"https://changelog.com/founderstalk/85\">database branching</a> becoming increasingly common, this workflow will make its way further and further up the stack. Let's look at this stack next...</p>\n<h2 id=\"heading-jobs-to-be-done-of-localhost\">Jobs to Be Done of Localhost</h2>\n<p>In <a target=\"_blank\" href=\"https://twitter.com/swyx/status/1533910738942562304\">my original tweet</a> calling out this trend I actually conflated different usages of local development (as <a target=\"_blank\" href=\"https://twitter.com/anildash/status/1534177596593917954\">Anil Dash observed</a>):</p>\n<ul>\n<li>Editing code in a local IDE</li>\n<li>Running code cloned to a local file directory</li>\n<li>Spinning up a local database instance/cluster of services to code against</li>\n</ul>\n<p>Conveniently, they are all under attack (did i miss any? please let me know):</p>\n<ul>\n<li>Editing code and Running code remotely: GitHub Codespaces, Replit, Coder.com, CodeSandbox, Gitpod</li>\n<li>Editing code locally while it runs on a Remote server: VSCode + <a target=\"_blank\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurevirtualmachines\">Azure VMs</a> or VSCode + <a target=\"_blank\" href=\"https://dev.to/aws/how-to-live-stream-meetups-on-twitch-without-any-special-equipment-56cb\">Amazon Workspaces</a> or <a target=\"_blank\" href=\"https://www.jetbrains.com/fleet/\">Jetbrains Fleet</a> \"Distributed IDE\" or <a target=\"_blank\" href=\"https://twitter.com/rberrelleza/status/1534241206514749441?s=20&amp;t=sNeNXfaWqhc2VzuUnSZ7uw\">Okteto Sync</a></li>\n<li>Editing code while it runs in a lightweight <a target=\"_blank\" href=\"https://tinyclouds.org/javascript_containers\">JavaScript container</a> in the browser: Stackblitz</li>\n<li>Running code remotely: <a target=\"_blank\" href=\"https://www.brev.dev/\">Brev.dev</a></li>\n<li>Staging resources to code against: Planetscale <a target=\"_blank\" href=\"https://docs.planetscale.com/concepts/branching\">Branches</a>, Stripe <a target=\"_blank\" href=\"https://stripe.com/docs/keys#test-live-modes\">Test mode keys</a>, Railway <a target=\"_blank\" href=\"https://docs.railway.app/develop/environments#ephemeral-environments\">Ephemeral Environments</a>, <a target=\"_blank\" href=\"https://www.okteto.com/\">Okteto environments</a>, <a target=\"_blank\" href=\"https://docs.withcoherence.com/docs/development-workspaces\">Coherence workspaces</a></li>\n</ul>\n<p>So no matter what you're doing in <code>localhost</code>, there's probably a well-funded startup or Amazon/Microsoft tool that does it better in the cloud.</p>\n<h2 id=\"heading-the-inevitability-argument\">The Inevitability Argument</h2>\n<p>One of the ironic tensions of humanity is that we <strong>say</strong> we want free will, privacy, self sufficiency and decentralization, but our <strong>actions</strong> tend toward the hive mind, convenience, interdependence and central infrastructure. My theory for this is that social psychology, economics and technology are very powerful centralizing forces.</p>\n<ul>\n<li>There are a long list of critical life essentials on which we are not self sufficient. Many historians mark agriculture as a starting point of civilization - meaning that <em>centralizing our food source</em> helped us move past a subsistence agriculture. Water supply and sanitation centralized <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/History_of_water_supply_and_sanitation\">in the 1700s</a>. Electricity has basically been centralized from the start.</li>\n<li>Closer to modern times we're also seeing everything we use move to the cloud, from movies/TV (from huge VHS and DVD libraries to a monthly Netflix/Disney/HBO subscription), games (from box games to free-to-play MOBAs and MMORPGs, Google Stadia, xCloud and PS Now), and knowledge (from Encyclopaedia to Wikipedia)</li>\n<li>Even in the B2B domain: <ul>\n<li>Salesforce's \"no software\" move to SaaS was just the first in a long history of moving every imaginable application to the cloud</li>\n<li>Box and Dropbox moved file storage to the cloud</li>\n<li>Docusign/Hellosign moved <em>legal contracts</em> to the cloud</li>\n<li>GAE/AWS/Azure moved the datacenter to the cloud</li>\n<li>Most recently <a target=\"_blank\" href=\"https://www.producthunt.com/stories/suhail-doshi-s-new-company-mighty-is-a-faster-browser-streamed-from-the-cloud\">Suhail Doshi's Mighty app</a> is moving even the <em>browser</em> to the cloud</li>\n</ul>\n</li>\n</ul>\n<p>To argue <em>against</em> <code>localhost</code> eventually going the way of the Dodo is to do the developer equivalent of asserting that most people want to run their own generators or grow their own food.</p>\n<h2 id=\"heading-the-outer-vs-inner-loop-argument\">The Outer vs Inner Loop Argument</h2>\n<p>You might argue that developers take so much pride in their tools that they will go out of their way to be self sufficient in them. And yet:</p>\n<ul>\n<li>Every <a target=\"_blank\" href=\"https://hn.algolia.com/?dateRange=all&amp;page=0&amp;prefix=false&amp;query=status.slack.com&amp;sort=byPopularity&amp;type=story\">Slack</a> and <a target=\"_blank\" href=\"https://hn.algolia.com/?dateRange=all&amp;page=0&amp;prefix=true&amp;query=github%20is%20down&amp;sort=byPopularity&amp;type=story\">GitHub</a> outage is basically celebrated as a Developer \"Snow Day\" (unscheduled holiday due to acts of god)</li>\n<li>Most companies run separate Build/CI/CD infrastructure anyway - in other words most apps don't get <em>deployed</em> without first going through some cloud infra as part of the critical path</li>\n</ul>\n<p>I will grant that there's a difference between \"We use CircleCI\" and \"Let's kill localhost\". The term of art the industry has adopted to describe this difference in dev tooling is the <a target=\"_blank\" href=\"https://twitter.com/beyang/status/1530589936361119744\">Dev \"Outer Loop\" vs \"Inner Loop\"</a> - the Outer Loop taking the git commit as the atomic unit of developer productivity, and the Inner Loop being all the developer activity that happens <em>between</em> commits.</p>\n<p>So, to use those terms - we're fine with the cloud taking the slow Outer Loop, but people are concerned about network latency affecting the much faster Inner Loop.</p>\n<ul>\n<li>With Sourcegraph, developers are effectively saying a remote service can do a better job of <em>searching</em> their code than they can locally</li>\n<li>With GitHub Copilot, even <em>autocomplete</em> is being made better by being cloud-enabled</li>\n</ul>\n<p>The degree to which the cloud can eat the Inner Loop is probably a question of reliability and latency - we are more than happy to hand over slow activities that take minutes, but nobody will tolerate 300ms latencies to see the result of a keystroke.</p>\n<blockquote>\n<p>Aside: It's probably worth a future essay breaking down the various components of the Inner Loop, as there are orders of magnitude differences in the latency of various activities we undertake and so different ideal solutions for each.</p>\n</blockquote>\n<h2 id=\"heading-the-potential-of-edge-compute\">The Potential of Edge Compute</h2>\n<p>Ultralow latency is the domain of edge compute, and likely the final frontier of how the cloud can eat that \"last mile\" of the developer Inner Loop.</p>\n<p>Anil Dash, CEO of Glitch, <a target=\"_blank\" href=\"https://twitter.com/anildash/status/1534177596593917954?s=20\">put it best</a>:</p>\n<blockquote>\n<p>I think its more likely the rise of tech like CRDTs &amp; edge compute will blur the lines of what we actually think of as local.</p>\n</blockquote>\n<p>Cloudflare folks working on Cloudflare workers <a target=\"_blank\" href=\"https://twitter.com/threepointone/status/1533914337290735616?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">also agree</a>:</p>\n<blockquote>\n<p>\"wrangler dev\" <strong>actually runs the worker on the edge</strong>, and we use localhost as a proxy. it means you have access to resources/secrets from your real environment, and we implement copy-on-write on stuff like durable objects that gets discarded once your shut down your session</p>\n</blockquote>\n<p>While not as low-latency, serverless folks like <a target=\"_blank\" href=\"https://twitter.com/timallenwagner/status/1534200123252584449\">Tim Wagner</a> (creator of AWS Lambda), <a target=\"_blank\" href=\"https://twitter.com/emrahsamdan/status/1533912205594353676?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">Emrah Samdan</a> (PM @ Serverless.com), and <a target=\"_blank\" href=\"https://twitter.com/tudor_g/status/1534443433846358016?s=21&amp;t=Af93P2lzKTPECID5Y0q2KA\">Tudor Golubenco</a> (CTO Xata) also have a lot of sympathy with this because of how easy it is to provision/scale serverless resources. </p>\n<h2 id=\"heading-pushback-its-still-not-good-enough\">Pushback: It's Still Not Good Enough</h2>\n<p><strong>Don't get overexcited here</strong>. My caution on judging this movement with today's technology is that for this to succeed, provisioning must feel so cheap as to be \"throwaway\" - even a latency of 10 seconds to spin up a preview environment is too long for me, though your mileage may vary.</p>\n<p>It takes a second to deploy a frontend preview with <a target=\"_blank\" href=\"https://www.netlify.com/blog/2018/08/14/announcing-netlify-drop-the-simplicity-of-bitballoon-with-the-added-power-of-netlify/\">Netlify Drop</a> and ~10 seconds with the Netlify CLI, but I still habitually use localhost for development because my iteration cycle is in <em>milliseconds</em>. I can and have moved part of that workflow to remote tools like Codesandbox, Gitpod and Stackblitz, but none of them are fully capable of replicating the full set of dependencies that I need for fullstack development. In fact, after one <a target=\"_blank\" href=\"https://www.learnwithjason.dev/how-to-use-netlify-identity-and-netlify-functions\">particularly bad livestream</a>, I resolved to always use <a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=19615546\">Netlify Dev</a> (the Netlify local dev solution I used to work on) because the iteration loop of git-push-and-wait-for-deploy was so agonizingly slow (I had the same pain with <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=VA3TFymZlW4\">AWS Amplify</a>).</p>\n<p>Other similar sentiments:</p>\n<blockquote>\n<p>Localhost has been attempted to be killed for eons, until the network is as fast as my disk, and can the remoteness of it can disappear entirely, localhost is here to stay. (<a target=\"_blank\" href=\"https://twitter.com/nickhudkins/status/1534344248987897856?s=21&amp;t=XrMtpxYKXroVa45238TsGA\">tweet</a>)</p>\n<p>Currently we have local development with impossible physics: assets that load immediately, APIs that respond in under a millisecond. So if dev goes to the cloud because the latency is acceptable, then we are finding a middle point that is acceptable for both devs and real users. (<a target=\"_blank\" href=\"https://twitter.com/royalicing/status/1534289848370352128?s=21&amp;t=XrMtpxYKXroVa45238TsGA\">tweet</a>)</p>\n</blockquote>\n<p>But surely you can see that the latency question is a question of letting the Moore's law equivalent of cloud commoditizing infrastructure take its course. If it's not good enough today, then wait 5 years and check back again.</p>\n<h2 id=\"heading-other-notable-responses\">Other Notable responses</h2>\n<p>People have very extreme:</p>\n<ul>\n<li>positive views<ul>\n<li>\"This is already the case in many big companies and killing local dev is going to be a huge win for developers.\" (<a target=\"_blank\" href=\"https://twitter.com/roopakv/status/1533916592085422080?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">Roopak from Bolt</a>)</li>\n<li>\"Since joining GitHub, I had no reasons trying to set up a local environment. Its trivial to develop on other teams repos via Codespaces.\" (<a target=\"_blank\" href=\"https://twitter.com/rakyll/status/1534781809031925760\">Jaana Dogan</a>)</li>\n</ul>\n</li>\n<li>and negative views<ul>\n<li><a target=\"_blank\" href=\"https://news.ycombinator.com/item?id=31669762\">Literally all of Hacker News hates it</a> (and <a target=\"_blank\" href=\"https://www.reddit.com/r/programmingcirclejerk/comments/v7ur45/general_purpose_computation_on_your_own_machine/\">Reddit too</a> but edgily)</li>\n<li>\"You pry localhost from my cold dead hands!\" (<a target=\"_blank\" href=\"https://twitter.com/coolpatiens/status/1533958291931512832?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">tweet</a>)</li>\n<li>\"Out of my cold dead hands. This is the final step in the road to the inescapable surveillance dystopia.\" (<a target=\"_blank\" href=\"https://twitter.com/zetalyrae/status/1533920071130955776\">tweet</a>)</li>\n<li>\"Nobody wondering whether it's a good idea to hand over what small power we have left as devs to a few private platforms.\" (<a target=\"_blank\" href=\"https://twitter.com/sgwil/status/1534068485273305089?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">tweet</a>)</li>\n<li>\"General purpose computation on your own machine is probably going to be illegal in 20 years. It will be our greatest accomplishment if we can liberate even 1% of humanity from this soul-stifling metaverse. We increasingly are moving from stone age to bronze age computing. We need a bronze age collapse and the beginning of iron-age computing. In particular, we need computing that escapes the massive centralized palace economy model, even if only for 1% of humanity.\" (<a target=\"_blank\" href=\"https://twitter.com/wolftivy/status/1533934249673228288?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">tweet</a>)</li>\n</ul>\n</li>\n</ul>\n<p><strong>Kelsey Hightower</strong> <a target=\"_blank\" href=\"https://twitter.com/kelseyhightower/status/1534723549830602753?s=20&amp;t=D8muI5fx9J2h9QMbURSUDw\">tries to explain it</a>: </p>\n<ul>\n<li>\"Seems the process of writing software has become so complex that 10 cores and 64 GB of RAM isn't enough. Or maybe this has more to do with the growing number of external dependencies and the related configuration required to manage it all.\"</li>\n<li>\"I thought the ability to configuration an application to use remote services would offer the best of both worlds. Keep the inner loop local while still leveraging managed services remotely.\"</li>\n<li>\"I got a feeling working around red tape is the number one reason remote dev environments are taking off.\"</li>\n</ul>\n<p><strong>Dan Abramov</strong> predicted this happens in <a target=\"_blank\" href=\"https://twitter.com/dan_abramov/status/1533912835096465408?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">5 years</a>, not 10.</p>\n<p><strong>Simon Willison</strong> <a target=\"_blank\" href=\"https://twitter.com/simonw/status/1534760881711566849?s=20&amp;t=D8muI5fx9J2h9QMbURSUDw\">points out another benefit</a>:</p>\n<blockquote>\n<p>The killer feature of remote dev environments is when you mess something up in your environment and you can click a button and wait a few seconds and get a brand new environment that works</p>\n</blockquote>\n<p><strong>Paul Biggar</strong> <a target=\"_blank\" href=\"https://twitter.com/paulbiggar/status/1534185221955932161\">sees</a> a few drivers:</p>\n<blockquote>\n<ul>\n<li>production is harder and harder to replicate locally</li>\n<li>it's cheaper to pay for cloud dev machines than expensive laptops each year</li>\n<li><p>services with high scale (eg Spanner) don't behave the same on localhost anyway - you just have an emulator </p>\n<p>Pretty sure we're going to do fewer things locally and a lot more developing directly against the cloud in the future</p>\n</li>\n</ul>\n</blockquote>\n<p><strong>Patrick Mckenzie</strong> <a target=\"_blank\" href=\"https://twitter.com/patio11/status/1533958144090460161?s=20&amp;t=FBNMNXzv8v6vwAdSzkTxDw\">says</a>: </p>\n<blockquote>\n<p>It seems to me like all the bits needed to do this are already abundantly available and its waiting for a) one solid product team and, crucially, b) becoming The Right Way To Do It for one language/platform that rockets to mainstream success.</p>\n<p>Youd want the curl dockerinthecloudlets.go to be the first line in all the tutorials and for that to be the last time users ever think about compute substrate or networking.</p>\n</blockquote>\n<h2 id=\"heading-further-reading\">Further Reading</h2>\n<ul>\n<li><a target=\"_blank\" href=\"https://github.com/readme/guides/developer-onboarding\"><strong>James Turnbull</strong></a>: \"I was speaking to the CEO of a developer tools company earlier this year. He told me that the biggest obstacle to contribution is his local development environment.\" </li>\n<li><a target=\"_blank\" href=\"https://maier.tech/posts/a-better-development-workflow-with-disposable-workspaces\"><strong>Thilo Maier on better development workflows with disposable workspaces with Gitpod</strong></a> including a comparison with Github Codespaces</li>\n<li><a target=\"_blank\" href=\"https://www.inkandswitch.com/local-first/\"><strong>Adam Wiggins</strong></a> on Local-first, the polar opposite ideal (see also <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=hJQqjELPcOU&amp;t=4986s\">talk from Peter van Hardenberg</a>)</li>\n<li><a target=\"_blank\" href=\"https://twitter.com/juliusgb2k/status/1534154613682757635?s=20&amp;t=oquJNGbOl2U8ZLfTR_fMUA\"><strong>Julius Gamanyi</strong></a> : Wardley mapping of the Cloud IDE workspace https://juliusgamanyi.com/2018/03/16/learning-to-map-cloud-ides-developer-workspaces-fast-time-to-first-line-of-code/</li>\n</ul>\n]]></description><link>https://dx.tips/the-end-of-localhost</link><guid isPermaLink=\"true\">https://dx.tips/the-end-of-localhost</guid><dc:creator><![CDATA[swyx]]></dc:creator><pubDate>Wed, 08 Jun 2022 16:22:38 GMT</pubDate><cover_image>https://cdn.hashnode.com/res/hashnode/image/upload/v1654704833257/UvJEnW9U7.png</cover_image></item><item><title><![CDATA[Mailbox: What's a good First DevRel Hiring Process?]]></title><description><![CDATA[<p><em>This is \"DX Mailbox\", a new \"agony aunt\" format where we offer quick (not definitive) responses to your questions. Email new questions in to swyx@swyx.io or DM <a target=\"_blank\" href=\"https://twitter.com/DXTipsHQ\">@DXTipsHQ</a> and <a target=\"_blank\" href=\"https://dx.tips\">subscribe</a> to our email newsletter for answers!</em></p>\n<hr />\n<p>Question from a Series A founder (read to the end to see who 👀): <strong>We're opening our first dev advocate role, and it's not something we've hired for before. Are there any good resources on setting up a process, attributes to look for, interview panels, etc?</strong></p>\n<p>The most important thing to note about a \"first hire\" for anything is that you're in a mutual discovery phase where you're learning what you want and they're learning what you need. So hiring and structuring for flexibility is more important than having absolute clarity upfront. </p>\n<h2 id=\"heading-deciding-who-you-need\">Deciding Who You Need</h2>\n<p>In other words, if you're hiring a first dev advocate on a 10-15 person team, you should figure out whether you need \"an early engineer that does devrel\" or \"a devrel that joined us early\". What you decide here determines whether you put them in for a generic technical early employee hiring loop or something more specialized.</p>\n<ul>\n<li><strong>Mainly early engineer</strong>: Prior experience as user/customer, heavy technical chops, open to learning devrel</li>\n<li><strong>Mainly experienced devrel</strong>:  Prior experience in dev content creation, has existing reputation/network, open to learning your tool</li>\n</ul>\n<p>Of course the best case scenario is you could get a unicorn that has all these qualities, but often they are already spoken for.</p>\n<ul>\n<li>Another ideal is \"hire the customer you'd most like to clone\", because dev advocates have a tendency to clone themselves by all their subtle tribal traits from their word choice to media/network preference. So you might as well hire someone who has successfully argued to adopt you at their company (a lot of devrel have never paid for their company's product and have no idea what it's like to advocate internally amid other alternatives and priorities - then again, you may not have even started charging yet).<ul>\n<li>You don't want to outright poach from your biggest customer, but you would be surprised how often the big champion of a tool implements the tool and then leaves their company to join the tool. This is because they tend to see more potential in the tool than everyone they work with (this was also more appealing back when devtools valuations 3x-ed every 6 months).</li>\n</ul>\n</li>\n<li>All things equal, I'd actually go for the early employee that does devrel, A) because you have an \"out\" to transition them back to eng/product if they end up enjoying that more, and B) it can be easier to train engineers to speak and write than it is to train writers and speakers to have an authentic connection to your technical problem. This is not a strongly held opinion, just a \"hunch\".<ul>\n<li>The worst case scenario here is paying up for an experienced devrel, expecting them to <code>brew install audience</code>, and then finding out it doesn't transfer.</li>\n<li>Pairing engineers-who-write with experienced DevRel managers and advisors might be a good approach</li>\n<li>However there are also plenty of folks who change domains successfully, especially if they know how to stay outside their comfort zone.</li>\n<li><em>All of these transitions deserve more room than I have in this answer, ping me with scenarios to help motivate a future writeup!</em></li>\n</ul>\n</li>\n<li>The last dimension to think about is whether you want to hire a team lead or IC:<ul>\n<li><strong>Hiring Team Lead</strong>: less pressure on you to define strategy and hire in future, but cost of mishire higher</li>\n<li><strong>Hiring IC Devrel</strong>: lets you take more time to figure out what works/what you want, leaves room for IC to grow into Lead role if they wish</li>\n</ul>\n</li>\n</ul>\n<p>Understanding what mix of <a target=\"_blank\" href=\"https://www.swyx.io/measuring-devrel\">Product-focused, Content-focused, or Community-focused DevRel</a> you want can also help, although at the early stage the usual answer is wanting one person to cover everything everywhere all at once. Mostly they will report either into Product, Marketing, or founders.</p>\n<h2 id=\"heading-candidate-pool\">Candidate Pool</h2>\n<p>Most recruiters will just live in LinkedIn all day sending you people with some version of \"Developer Advocate\" in their title. -All- of them are doing this, because they don't understand where devrel hangs out and it may not be LinkedIn.</p>\n<p>If you aren't having any luck with the LinkedIn pool you will need to be a bit more proactive:</p>\n<ul>\n<li>Your current users &amp; customers, as mentioned above - including those of competitors</li>\n<li>Existing speakers and organizers from conferences you'd like to appear at - go thru prior year speaker lists</li>\n<li>Top HN bloggers, Youtubers, Streamers relevant to your field</li>\n<li><a target=\"_blank\" href=\"https://twitter.com/swyx/status/1531008979832188928\">Twitter network density</a> can be a really good prospecting tool</li>\n</ul>\n<p>Shortlisting candidates isn't the hard part - by definition they will probably have some kind of public footprint (but it should not be a hard requirement). It's just more that they are likely already spoken for, and you need to get both their interest and timing right.</p>\n<h2 id=\"heading-job-description\">Job Description</h2>\n<p>Many first devrel's get hired without a JD and figure it out as they go along. I did not look at the JD for my last 3 jobs even though I've also written them. But it can still be a useful exercise for you to understand/communicate your expectations before you start.</p>\n<p>There are some <a target=\"_blank\" href=\"https://twitter.com/GergelyOrosz/status/1512041397259583491\">standard components of any good JD</a> you should consider - I've added some devrel-relevant commentary here:</p>\n<ul>\n<li><strong>The opportunity</strong><ul>\n<li>What appeals to devrel is a beautiful (well designed) product with a quick aha moment and yet long tail of features to get deep into, with an obvious large audience that just doesn't know about it yet.</li>\n<li>Tell a story that you are Post-PMF, pre-\"future is evenly distributed\"</li>\n<li>Solving a problem/mission with as wide an audience as possible</li>\n</ul>\n</li>\n<li><strong>The work</strong><ul>\n<li>Give an expectation of amount of travel (if possible - again you may not have figured this out and that's ok - and yes both 0% and 75% travel happen)</li>\n<li>Give specifics on <a target=\"_blank\" href=\"https://dx.tips/circles#heading-examples-the-metalanguage-stack\">content types</a> you expect them to work on most</li>\n<li>To some extent you can't really get creative here, everyone just has variations of the same few things, so don't stress out too much making this stand out. Just make clear that creativity is encouraged. Show, don't tell, what kind of work you want out of devrel and you'll attract people who \"get it\".</li>\n</ul>\n</li>\n<li><strong>Experience</strong> (just a menu of options, don't require all, split between must have and nice to have)<ul>\n<li>X years in industry, or with certain tech stack</li>\n<li>Regular organizer at a meetup</li>\n<li>Have organized a technical conference</li>\n<li>Published X articles in well known industry publications like A, B, C</li>\n<li>Regular speaker/keynote speaker in well known technical conferences</li>\n<li>Notable blog/podcast/newsletter/social media/video following on related technical topics</li>\n</ul>\n</li>\n<li>Standard disclosures on tech stack, team, interview process, comp range, benefits</li>\n</ul>\n<p>Some JD's to crib off of:</p>\n<ul>\n<li>🔥🔥 https://fly.io/blog/we-are-hiring-elixir-developer-advocates/</li>\n<li>🔥 https://fusionauth.io/jobs/senior-developer-advocate</li>\n<li>🔥 https://startup.jobs/developer-advocate-cloudflare-315330</li>\n<li>https://remoteok.com/remote-jobs/72590-remote-developer-advocate-stripe</li>\n<li>(i'm biased) https://jobs.lever.co/temporal/c227b836-443b-4844-b6fb-9ea11cf65cfe</li>\n<li>(i'm hiring) https://boards.greenhouse.io/airbyte/jobs/4304422004</li>\n</ul>\n<blockquote>\n<p>Please let me know if you've seen other 🔥 JD's for dev advocate! I will develop this to be a bigger <a target=\"_blank\" href=\"https://dx.tips/resources\">resource</a> in future.</p>\n</blockquote>\n<p>For leadership roles - rarely see a JD as most people are promoted into these:</p>\n<ul>\n<li>https://leerob.io/blog/head-of-devrel</li>\n<li>https://www.netlify.com/blog/2021/01/06/developer-experience-at-netlify/</li>\n<li>https://trag.dev/</li>\n<li>https://alexlakatos.com/avocados/2020/11/24/building-first-year-devrel-program/</li>\n</ul>\n<blockquote>\n<p>Please let me know if you've seen other devrel leader self-descriptions! I will develop this to be a bigger <a target=\"_blank\" href=\"https://dx.tips/resources\">resource</a> in future.</p>\n</blockquote>\n<h2 id=\"heading-qualitative-qualities\">Qualitative Qualities</h2>\n<p>There's an open question of \"what qualities to look for\", which is a deeper question about understanding what qualities matter and something I don't yet have a good framework around.</p>\n<p>Five things I do care a lot about:</p>\n<ul>\n<li><strong>Insight</strong>: Can explain complex things in as simple a manner as possible and not simpler</li>\n<li><strong>Tactics</strong>: Knows how to get mass attention when a big launch is at stake</li>\n<li><strong>Grit</strong>: Doesn't give up when faced with the \"content grind\" - not just talking a big game but knowing how to ship content consistently over time through thick and thin.</li>\n<li><strong>Empathy</strong>: Understanding what the user/developer needs and wants</li>\n<li>(nice to have) Knowledge of surrounding ecosystem</li>\n</ul>\n<p>Whatever the list of qualities are, pick them with a view to the questions you will ask and the interview process you will construct.</p>\n<h2 id=\"heading-hiring-loop\">Hiring Loop</h2>\n<p>As mentioned this will branch based on who you have decided to focus on, but here's what I've done given the qualities above:</p>\n<ol>\n<li>Initial Screen with Hiring Manager or Recruiter. Go over Background and Grit.<ul>\n<li>If I'm doing the screen, I like to speedrun the whole thing by asking about what tech they know well, picking something I also know, and then asking them to \"Explain how X works\" (see below)</li>\n</ul>\n</li>\n<li>Junior/Senior level Technical challenge with Eng team<ul>\n<li>The reason we had tech screens so early is we found a lot of devrel candidates that were extremely rusty in code, and we really needed people who were still actively able to demo and run workshops, hence preferred to find this out earlier rather than later. YMMV.</li>\n</ul>\n</li>\n<li>Full panel (usually all behavioral):<ul>\n<li>1:1 with Docs. Focused on Information Architecture &amp; Product Understanding.</li>\n<li>1:1 with Marketing/Product. Focused on Tactics.</li>\n<li>1:1 with Community/Support. Focused on Developer Empathy.</li>\n<li>1:1 with other Devrel (or Devrel advisor). Focused on surrounding ecosystem.</li>\n</ul>\n</li>\n<li><strong>Presentation to Panel</strong>. Focused on Delivering Insights. (more on this later)<ul>\n<li>Followup feedback/deep dive session with Hiring Manager</li>\n</ul>\n</li>\n<li>(If leadership) Planning session with CXO on strategy/hiring process (can be take-home)</li>\n</ol>\n<p><strong>The Presentation</strong> is the DevRel equivalent of FizzBuzz. It is a practice I stole from the AWS DA hiring loop, where you are simply asked to do a 20-25 minute presentation on something you know well (sometimes simply recycling an old talk), and to have a panel of 4-5 engineers lob all sorts of questions at you for 15 mins, from off-topic to in-depth. The test is not only about roleplay and handling questions under pressure, but also one of making boring technical content both clear and engaging. If you're struggling to stay awake or follow along, that's a problem.</p>\n<p>Experienced DAs will have a wide body of work from which you can actually observe this under more realistic scenarios, so it is possible to exempt this step based on obvious past work and/or modify it to test for other activities like content brainstorming, event planning or building a demo (something I've actually done and had a lot of fun with, but definitely was a much bigger time commitment).</p>\n<p>The hidden 6th step, as with every key hire, is <a target=\"_blank\" href=\"https://greylock.com/greymatter/holly-rose-faith-greylock-executive-reference-checklist/\">reference checks</a>.</p>\n<blockquote>\n<p>Followup question: How important it is to have knowledge of specific tactics, understanding of which companies today have good dev rel / should be emulated, etc? Especially if we're focused more on the early employee profile, they might not be knowledgeable of devrel at all - in that case, do we just assess communication ability?</p>\n</blockquote>\n<p>I do think it helps if the candidate can name role models (whether company or individual), but only if they can specifically break down what tactics they use to succeed (better if they have direct evidence). Everyone wants to be \"like Stripe\", but fewer have spent time studying the Collison Installation or reading up on their API versioning strategy. But it is no dealbreaker - knowing how people retroactively explain success is still quite a distance from being able to replicate/execute it.</p>\n<p>Some (very rough) ideas for tactical open ended interview questions:</p>\n<ul>\n<li><strong>Explain how X works?</strong> look for clarity of communication, analogies, attention to protocols/technical tradeoffs, ability to go deep, comfort with/resourcefulness in ignorance.<ul>\n<li>Then follow up with <strong>Why was X successful?</strong>. Ask them to counter argue with themselves.</li>\n</ul>\n</li>\n<li><strong>What makes a good talk?</strong> look for opinions on slides, sequencing, speed, emotions, prep<ul>\n<li>If they are an experienced speaker, ask for the best/most impactful talk they've done and as much detail on the creation process as possible</li>\n</ul>\n</li>\n<li><strong>What makes a good blogpost?</strong> look for tone, information architecture, humor, facility with the various types of content<ul>\n<li>Bonus: \"Which companies write great blogposts and why?\"</li>\n</ul>\n</li>\n<li><strong>What makes a good demo/workshop?</strong> look for opinions on documentation, simplicity traded off with utility<ul>\n<li>Bonus if they've actually done one, and done paid workshops</li>\n</ul>\n</li>\n<li><strong>How do you ensure a great product launch?</strong> look for timing, pitching, mastery of toolkit, understanding of other launches</li>\n<li><strong>How do you think we should pitch ourselves?</strong> First authentic answer, then ask for a second answer from a different POV/audience. Looking for empathy, ability to hook interest.</li>\n<li>Interdepartmental questions - <strong>How do you like to work with Docs/Marketing/Product/Founders</strong>? Nice if they volunteer an opinion on how they work with Engineering.</li>\n</ul>\n<h2 id=\"heading-whos-asking\">Who's Asking?</h2>\n<p>If you're keen on being a first DevRel hire at an early stage company, our first mailbox writein also agreed to doxx themselves - It's <a target=\"_blank\" href=\"https://twitter.com/__joshma\">Josh Ma</a> of <a target=\"_blank\" href=\"https://www.airplane.dev/blog/series-a-benchmark\">Airplane.dev</a>! Hearing <a target=\"_blank\" href=\"https://twitter.com/search?q=airplane.dev&amp;src=typed_query\">a lot of good things</a>, check them out.</p>\n<h2 id=\"heading-further-reading\">Further Reading</h2>\n<p>Thanks to <a target=\"_blank\" href=\"https://twitter.com/mooreds/status/1531747243660677121?s=20&amp;t=jRWEM9R0Ozu-cJcBai9oqw\">Dan Moore</a> for sharing <a target=\"_blank\" href=\"https://thenewstack.io/youre-doing-it-wrong-recruiting-a-devrel/\">Wesley Faulkner's writeup on The New Stack</a> linking to Taylor Barnett's <a target=\"_blank\" href=\"https://taylorbar.net/posts/recruiting-your-first-developer-advocate:-the-first-email/\">Recruiting your first Developer Advocate</a>!</p>\n<p>Help us share this post!</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://twitter.com/DXTipsHQ/status/1531627998167764992\">https://twitter.com/DXTipsHQ/status/1531627998167764992</a></div>\n]]></description><link>https://dx.tips/mailbox-first-devrel-hiring</link><guid isPermaLink=\"true\">https://dx.tips/mailbox-first-devrel-hiring</guid><dc:creator><![CDATA[swyx]]></dc:creator><pubDate>Tue, 31 May 2022 01:49:19 GMT</pubDate></item><item><title><![CDATA[The Radiating Circles of DX Architecture]]></title><description><![CDATA[<p>To paraphrase Conway's law, <strong>most companies will ship the developer experience of their org charts.</strong> And yet org charts are rarely designed with the user in mind.</p>\n<p>Consider the journey of a typical developer-user: You hear about a tool from either direct advocacy (first-party <strong>content</strong>) or word of mouth (third-party <strong>community</strong>). Then you go through the <strong>docs</strong>, and start interacting with the <strong>product</strong>. That's the work of at least 4 teams, all with different priorities and emphases. </p>\n<p>If you've ever found a blogpost that should have been in the docs, or learned something about the product only from talking to other users, you've felt the misalignment that arises when <strong>it's nobody's job to design for the end-to-end developer experience</strong>.</p>\n<p>What does it take to design a complete+cohesive journey?</p>\n<p>This is an emerging field I've been calling <strong>DX Architecture</strong>. My favorite mental model for it looks like \"Radiating Circles\":</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653865033249/gP_vOxGCg.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<aside> \n\n<em>I'll be honest - I don't love the name - I've had coworkers make fun of me for it being my \"<a target=\"_blank\" href=\"https://www.bustle.com/articles/157415-are-the-conjoined-triangles-of-success-real-silicon-valley-mocks-a-famous-business-model\">Conjoined Triangles of Success</a>\", but it popped out of my mouth in <a target=\"_blank\" href=\"https://devxpod.buzzsprout.com/1895030/10012425-the-radiating-circles-in-devx-with-swyx-head-of-developer-experience-temporal\">a podcast</a> and the name stuck!</em>\n\n</aside>\n\n<h2 id=\"heading-the-metalanguage-stack-from-code-to-humans\">The Metalanguage Stack: From Code to Humans</h2>\n<p>In his excellent talk on <a target=\"_blank\" href=\"https://frantic.im/meta-language/\">Taming the Metalanguage</a>, Cheng Lou first identified the dizzying array of stuff that accumulates around code to make it palatable to humans:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653866746845/iOPGgwHFJ.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<p>He spoke of metalanguage as a thing to be tamed, which is true: </p>\n<ul>\n<li>The best docs are the docs I don't have to read, because the product is so intuitive or teaches me as I go</li>\n<li>The best talks and blogposts are the talks and blogposts I don't have to consume, because the docs clearly said everything there was to be said</li>\n<li>and so on...</li>\n</ul>\n<p>But still, you can't avoid it, and over time you'll probably want to accumulate more of some things than the other. </p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653867087999/dEkuiL4-x.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<p><strong>Adjust to taste</strong>. 4 layers is merely the simplest I can make it. This concentric circle model just represents an idealized proportion of how much of each type of DX effort you might want; based on your situation, you might want more of one thing and less of another.</p>\n<p>For example, Snowflake and Stripe did not bother having fulltime developer relations for their first 5-7 years of existence, whereas SEO-driven SaaS apps should overindex on content rather than community.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653867257268/g-c1tGIW6.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<p>Having good docs are non-negotiable, though :)</p>\n<h3 id=\"heading-examples-the-metalanguage-stack\">Examples: The Metalanguage Stack</h3>\n<p>Some folks often want to see more examples to think through this experience so here's a non-exhaustive list of parts of your developer experience to think through either when you launch a new product or when looking at your entire offering holistically:</p>\n<ul>\n<li><strong>Product DX</strong><ul>\n<li>Scaffolding/Hello World</li>\n<li>API Design</li>\n<li>Error messages (<a target=\"_blank\" href=\"https://www.swyx.io/write-errors-that-don-t-make-me-think-24hg\">that don't make me think</a>)</li>\n<li>UI affordances/validation/visual feedback</li>\n<li>Dashboard/Admin UI</li>\n<li>Auxiliary Devtools, CLIs/Utilities, Editor Integrations</li>\n<li>Speed, speed, speed. Speed is so important it is its own feature.</li>\n</ul>\n</li>\n<li><strong>Docs DX</strong><ul>\n<li>API Reference</li>\n<li>Tutorials, Guides, Recipes (shared with Content)</li>\n<li>FAQ and Glossary/Conceptual Explanations</li>\n<li>Debugging guide (\"Common Errors &amp; How To Fix Them\")</li>\n<li>Readme's</li>\n<li>Versioning/Migration</li>\n<li>Search experience</li>\n<li>Information Architecture</li>\n</ul>\n</li>\n<li><strong>Content DX</strong><ul>\n<li>Blogposts</li>\n<li>Tutorials, Guides, Recipes (shared with Docs)</li>\n<li>Demos/Workshops</li>\n<li>Shortform Videos</li>\n<li>Longform Videos (including livestream footage and external talks)</li>\n</ul>\n</li>\n<li><strong>Community DX</strong> (<em>More on <a target=\"_blank\" href=\"https://www.swyx.io/community-heat\">Community Heat</a> in a previous post</em>)<ul>\n<li>Hot Community<ul>\n<li>Chat (Slack/Discord)</li>\n<li>Livestream/Meetups/Company Conference</li>\n<li>Social Media (Twitter/LinkedIn/Reddit/etc)</li>\n</ul>\n</li>\n<li>Cold Community<ul>\n<li>Forum posting</li>\n<li>Newsletter</li>\n<li>Quarter/Annual Roundup or Changelog or Survey</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>You can pretty much turn some version of this list into a DX Architecture checklist for every launch/update you do.</p>\n<h2 id=\"heading-the-feature-map-completeness-and-sequencing\">The Feature Map: Completeness and Sequencing</h2>\n<p>The other Developer Experience ball that often gets dropped is <strong>solely focusing on the happy/beginner path</strong>. </p>\n<p>A lot of developer advocates spend their time only talking about their company's free tier, and doing \"Hello World\" ad infinitum. This comes out of the standard view of DevRel as a pure top-of-funnel function, leaving users with a sharp learning curve the moment they need to wander off the paved road.</p>\n<p>The central argument of <a target=\"_blank\" href=\"https://www.swyx.io/developer-exception\">Developer Exception Engineering</a> is that responsible DX should at least <em>briefly</em> prepare the user for the less glamorous, unhappy path.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653868607456/Y5GReRiD_.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<aside>\n\n<em>I actually hesitate to call it \"less glamorous\" in terms of public visibility, because everyone who gets as far as the unhappy path are your serious users - in other words, the people actually paying your bills! For sure this function should be shared with solutions/success/support teams. No one function can really be responsible for all the things, but empathy means understanding that the user will eventually face issues and preparing them for it.</em>\n\n</aside>\n\n<p>My second realisation about designing a \"complete\" developer experience is that everyone should have the same mental map of what the company's features even <em>are</em>. Everyone has their favorite toy feature, but especially in mature projects, it's common to have so many features that not everyone even knows all the features or are aligned on what the company wants to offer for each user persona.</p>\n<p>The solution for this is <strong>Feature Mapping</strong>, which I will cover in a future blogpost, but you can see <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=xwJHaGRw9mA&amp;t=1706s\">how we applied it at Temporal in this talk</a>. The TL;DR is you want to pick the two most important axes that circumscribe your developer experience and make sure that all your users go through them, or can at least easily find them when they need to.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653868864616/ZTOKo_Xl6.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<p><strong>Must it be a 2x2?</strong> No - make it a pentagon, or <a target=\"_blank\" href=\"https://siliconangle.com/2021/09/29/devops-dummies-author-emily-freeman-introduces-revolutionary-model-modern-software-development-awsq3/\">sextagon</a>, dodecahedron, or whatever you want. Just remember that every extra dimension makes it that much harder to remember and therefore less likely to stick.</p>\n<p>Simplicity is a feature.</p>\n<p>Finally, <strong>sequencing</strong>, or providing an opinionated path through your feature map, helps put your developer experience on rails rather than making every branching point a tiring choose-your-own-adventure.</p>\n<h3 id=\"heading-examples-feature-mapping-axes\">Examples: Feature Mapping Axes</h3>\n<p>Pick from two DX axes that your users care most about:</p>\n<ul>\n<li>Happy path vs Unhappy path</li>\n<li>Developer vs Operator</li>\n<li>User-facing vs Behind-the-scenes</li>\n<li><a target=\"_blank\" href=\"https://medium.com/the-prefect-blog/positive-and-negative-data-engineering-a02cb497583d\">Positive vs Negative Engineering</a></li>\n<li>Proprietary cloud vs Open source</li>\n<li>Getting started vs Production (Debugging/Testing/Monitoring/Upgrading/Scaling)</li>\n<li>Core architecture vs Plugin development</li>\n</ul>\n<p>Basically, there's always some version of \"eat your vegetables\" part of your developer experience that is consistently overlooked, and some version of \"small\" that looks very different when it is \"big\". Figure out what they are and make it a habit to give the overlooked part as much care as the flashier parts of your DX. Your users will appreciate it - and be more successful as a result.</p>\n<h2 id=\"heading-putting-both-together\">Putting Both Together</h2>\n<p>Having gone through the exercise of the Metalanguage Stack and the Feature Map, you can simply paste one atop the other, and evaluate your current experience against your ideal:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1653865033249/gP_vOxGCg.png\" alt=\"image.png\" class=\"image--center mx-auto\" /></p>\n<p>This is basically a two dimensional checklist that helps you find developer experience gaps and get everyone aligned on what matters to the company and to users!</p>\n<p>You might be wondering how to apply this, so here's a 30 minute exercise: </p>\n<ol>\n<li>Take a devtool company you know well</li>\n<li>Ask what top 4 things serious users <em>should</em> know on the first encounter, and when they adopt for production</li>\n<li>Taking a critical, unsentimental look at each of their community, content, docs, and product:<ul>\n<li>How hard was it to answer those questions?</li>\n<li>How good were those answers?</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"heading-dx-starts-from-the-core\">DX starts from the core</h2>\n<p>Why this concept is known as \"Radiating\" Circles is that DX Architecture starts from inside-out. The best docs and devrel in the world don't matter if the product is fundamentally broken. All you'll have is a leaky bucket - People will try you out and then leave right away with a poor first impression.</p>\n<p>So it makes sense that your DX efforts should <strong>adjust to maturity</strong>: The earlier the product, the more that inner circles should be emphasized over outer ones.</p>\n<p>If you have a new product/feature launch coming soon, focus on the product <em>first</em> (API design, error messages, visual feedback, etc), then the docs, then the content, and so on, in that order. Overweighting outer circles when the inner circles aren't complete will make the experience feel lacking.</p>\n<p>In practice, things are never that sequential, so this is more of a guideline of where to spend time. Start as close to the product as possible, then work your way outward, doubling back whenever you have a new product launch or discover some new insight about your user's needs.</p>\n<h2 id=\"heading-further-reading\">Further Reading</h2>\n<p>The talk version of this blogpost has more context and explanations on some of the design choices behind these mental models:</p>\n<div class=\"embed-wrapper\"><div class=\"embed-loading\"><div class=\"loadingRow\"></div><div class=\"loadingRow\"></div></div><a class=\"embed-card\" href=\"https://www.youtube.com/watch?v=d9lo-Ej98l4\">https://www.youtube.com/watch?v=d9lo-Ej98l4</a></div>\n<p>Other relevant org chart and design thinking posts:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.netlify.com/blog/2021/01/06/developer-experience-at-netlify/\">DX at Netlify</a> by Sarah Drasner</li>\n<li><a target=\"_blank\" href=\"https://leerob.io/blog/devrel-at-vercel\">DevRel at Vercel</a> by Lee Robinson</li>\n</ul>\n<p><strong>*Acknowledgements</strong> - thanks to Lee Robinson and Thomas Schranz for reviewing early drafts as well as Pauline Narvas and Mike Nikles for giving the original inspiration to write this up!*</p>\n]]></description><link>https://dx.tips/circles</link><guid isPermaLink=\"true\">https://dx.tips/circles</guid><dc:creator><![CDATA[swyx]]></dc:creator><pubDate>Mon, 30 May 2022 14:01:00 GMT</pubDate></item><item><title><![CDATA[The Why of DX]]></title><description><![CDATA[<p>I'm gonna be upfront with you: \"DX\" is an overused buzzword. I really hesitated a lot buying the <code>dx.tips</code> domain name!</p>\n<p>If you want a bunch of developers to be happy in the short term, sure, give them swag, booze, pool tables, cash, stock, cocaine, whatever.</p>\n<p>But in the long term, the more substantial issues crop up that really drive people towards and away certain tools:</p>\n<ul>\n<li><a target=\"_blank\" href=\"https://www.swyx.io/developer-exception\">Developer Exceptions</a> - the hidden \"WTFs\" after you wander off the happy path</li>\n<li>Designing the <a target=\"_blank\" href=\"https://infraeng.dev/swyx/\">Developer Journey</a> through complex, feature-filled, general purpose tools</li>\n<li>Growing Developer Community (whether it is just the userbase, or open source contributors, or <a target=\"_blank\" href=\"https://www.swyx.io/community-heat\">company-or-user-organized events</a>, or <a target=\"_blank\" href=\"https://www.swyx.io/particle-wave-duality\">passive consumption</a>)</li>\n</ul>\n<p><em>This</em> is what I mean by <code>DX</code> - not specifically \"Developer Experience\", but more with \"X\" as a plug variable denoting everything to do with developers - Developer Tools, Developer Community, Developer Relations, Developer Careers, and so on.</p>\n<p>I've had the good fortune to work with some top developer experience teams, and to meet hundreds more working in this field.  As an <a target=\"_blank\" href=\"https://github.com/sw-yx/devtools-angels/\">active angel investor</a> and <a target=\"_blank\" href=\"https://www.swyx.io/community-builder\">technical community builder</a>, I've often felt that there wasn't really a venue for me to discuss the problems I've faced and the solutions I've tried. I've got many friends who feel the same way too.</p>\n<p>My hope is that this becomes a newsletter that becomes an industry outlet for active practitioners in DX. \nBy focusing, I am splitting off the sporadic output that I and my guest authors write on our individual blogs, and centralizing them in one place for discovery, with me as curator. I'm also going for \"Tips\" - aka short form - as much as possible.</p>\n<p>Topics planned:</p>\n<ul>\n<li>Product &amp; Strategy<ul>\n<li>API Design</li>\n<li>DevTools Trends</li>\n<li>Hard Problems Working on Platforms</li>\n<li>Open Source Licensing</li>\n<li>Product Led Devtools</li>\n</ul>\n</li>\n<li>Marketing &amp; Content<ul>\n<li>Category Creation</li>\n<li>Twitter/Youtube Guides</li>\n<li>Company Blogging</li>\n<li>Do You Need Launch Weeks?</li>\n<li>Meaningless Taglines</li>\n<li>Competing Against DIY</li>\n</ul>\n</li>\n<li>Community<ul>\n<li>Conference Management</li>\n<li>Sync vs Async Community</li>\n<li>User-Organized Meetups</li>\n</ul>\n</li>\n<li>Data<ul>\n<li>Comp surveys</li>\n<li>Time to 1m Developers</li>\n</ul>\n</li>\n</ul>\n<p>If you like this idea, please subscribe via email or follow <a target=\"_blank\" href=\"https://twitter.com/dxtipshq\">@DXTipsHQ</a>. You can also email swyx@swyx.io about sponsorship and guest posting opportunities. Thanks for your support!</p>\n]]></description><link>https://dx.tips/why</link><guid isPermaLink=\"true\">https://dx.tips/why</guid><dc:creator><![CDATA[swyx]]></dc:creator><pubDate>Fri, 29 Apr 2022 20:49:29 GMT</pubDate></item></channel></rss>",
        "rawHeaders": [
            "Content-Type",
            "text/xml",
            "Connection",
            "close",
            "x-vercel-id",
            "fra1:fra1:fra1::pdx1::4vfkc-1655644942626-d3591b42f2e2",
            "x-matched-path",
            "/rss.xml",
            "cache-control",
            "public, max-age=0, must-revalidate",
            "referrer-policy",
            "origin-when-cross-origin",
            "x-frame-options",
            "deny",
            "content-security-policy",
            "default-src *; script-src * 'unsafe-eval' 'unsafe-inline'; style-src * 'unsafe-inline'; font-src *; img-src * data:",
            "x-content-type-options",
            "nosniff",
            "x-vercel-cache",
            "HIT",
            "server",
            "Vercel",
            "content-length",
            "85853",
            "age",
            "223",
            "strict-transport-security",
            "max-age=63072000",
            "date",
            "Sun, 19 Jun 2022 13:18:39 GMT"
        ],
        "responseIsBinary": false
    }
]